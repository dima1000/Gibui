"""autogenerated by genpy from C21_VisionAndLidar/C21_objRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import C21_VisionAndLidar.msg

class C21_objRequest(genpy.Message):
  _md5sum = "01e3ae5f2566a27c0b5861cf393d6442"
  _type = "C21_VisionAndLidar/C21_objRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """C21_VisionAndLidar/C21_RECT sample

================================================================================
MSG: C21_VisionAndLidar/C21_RECT
int32 x1
int32 y1
int32 x2
int32 y2
"""
  __slots__ = ['sample']
  _slot_types = ['C21_VisionAndLidar/C21_RECT']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       sample

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(C21_objRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.sample is None:
        self.sample = C21_VisionAndLidar.msg.C21_RECT()
    else:
      self.sample = C21_VisionAndLidar.msg.C21_RECT()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_4i.pack(_x.sample.x1, _x.sample.y1, _x.sample.x2, _x.sample.y2))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.sample is None:
        self.sample = C21_VisionAndLidar.msg.C21_RECT()
      end = 0
      _x = self
      start = end
      end += 16
      (_x.sample.x1, _x.sample.y1, _x.sample.x2, _x.sample.y2,) = _struct_4i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_4i.pack(_x.sample.x1, _x.sample.y1, _x.sample.x2, _x.sample.y2))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.sample is None:
        self.sample = C21_VisionAndLidar.msg.C21_RECT()
      end = 0
      _x = self
      start = end
      end += 16
      (_x.sample.x1, _x.sample.y1, _x.sample.x2, _x.sample.y2,) = _struct_4i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_4i = struct.Struct("<4i")
"""autogenerated by genpy from C21_VisionAndLidar/C21_objResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class C21_objResponse(genpy.Message):
  _md5sum = "a7c84ff13976aa04656e56e300124444"
  _type = "C21_VisionAndLidar/C21_objResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """geometry_msgs/Point point

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

"""
  __slots__ = ['point']
  _slot_types = ['geometry_msgs/Point']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       point

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(C21_objResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.point is None:
        self.point = geometry_msgs.msg.Point()
    else:
      self.point = geometry_msgs.msg.Point()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3d.pack(_x.point.x, _x.point.y, _x.point.z))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.point is None:
        self.point = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 24
      (_x.point.x, _x.point.y, _x.point.z,) = _struct_3d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3d.pack(_x.point.x, _x.point.y, _x.point.z))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.point is None:
        self.point = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 24
      (_x.point.x, _x.point.y, _x.point.z,) = _struct_3d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3d = struct.Struct("<3d")
class C21_obj(object):
  _type          = 'C21_VisionAndLidar/C21_obj'
  _md5sum = 'e9a27b691b1965d66464f212fa6671fd'
  _request_class  = C21_objRequest
  _response_class = C21_objResponse
